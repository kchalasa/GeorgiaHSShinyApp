main = "Correlation between variables",
panel=panel.smooth)
fit<-lm(mpg~.,mtcarsDF)
drop1(fit, test="F")
drop1(fit, test="F")
fit1<-lm(mpg ~ cyl + disp + hp + drat + wt + qsec + vs + am + gear + carb,mtcars)
drop1(fit1, test="F")
drop1(fit, test="F")
drop2(fit, test="F")
influence.measures(fit)
extractAIC.lm (fit)
extractAIC(fit)
summary(fit)
pairs(mtcars.num, main = "Scatter plot for numeric variables")
data(mtcars)
mtcars$am <-  as.factor(mtcars$am)
mtcars$vs <-  as.factor(mtcars$vs)
num.cols <- c(1,3,4,5,6,7)
mtcars.num <- mtcars[,num.cols]
pairs(mtcars.num, main = "Scatter plot for numeric variables")
mt.cor <- abs(cor(mtcars.num)) #get the correlation matrix
mt.col <- dmat.color(mt.cor) # asign colors
# reorder variables so those with highest correlation
# are closest to the diagonal
mt.s <- order.single(mt.cor)
cpairs(mtcars.num, mt.s, panel.colors=mt.col, gap=.5,
main="Variables Ordered and Colored by Correlation" )
library(gclus)
library(cluster)
step <- stepAIC(fit, direction="both", trace = FALSE);
summary(step)
vif(fit)
bestmodel <- stepAIC(fit, direction="both")
summary(bestmodel)$r.squared
summary(bestmodel)
base <- lm(mpg ~ am, data = mtcars)
all <- lm(mpg~.,data=mtcars)
anova(all,base,bestmodel)
plot(bestmodel)
par(mfrow=c(2,2))
plot(bestmodel)
plot(bestmodel, which=c(4,6))
t.test(mpg ~ am, data = mtcars)$statistic
fit<-lm(mpg~.,mtcarsDF)
step <- stepAIC(fit, direction="both", trace = FALSE);
summary(step)
vif(fit)
order(vif(fit))
vif(fit)
df<-vif(fit)
names(df)
class(df)
order(df)[1,]
order(df)[1,1]
order(df)[1,]
df[order(df[,1],]
df[order(df[,1]),]
vif(fit)[order(vif(fit)[,1])]
vif(fit)[order(vif(fit)[,1]),]
boxplot(mtcars$mpg~mtcars$am,col=c("blue","red"),xlab="Transmission",ylab="mpg",main="Transmission and mpg",names=c("Automatic","Manual"))
plot(mtcars,panel=panel.smooth,pch=19,lwd=3,main="Relationships among variables")
TTest<-t.test(x=mtcars[mtcars$am==0,]$mpg,y=mtcars[mtcars$am==1,]$mpg,paired=FALSE)
TTest$p.value
model<-lm(mpg~.,data=mtcars)
Selected.model<-step(model,direction="backward",k = 2)
summary(Selected.model)
par(mfrow=c(1,2))
plot(Selected.model$fitted.values,Selected.model$residuals,pch=19,main="Fitted value VS Residuals")
abline(0,0,col="Red",lwd=3)
qqplot(Selected.model$fitted.values,Selected.model$residuals,pch=19,main="Residual QQ plot")
leverage<-hatvalues(Selected.model)
sum(leverage>0.5)
summary(Selected.model)
g=ggpairs(mtcars,lower=list(continuous="smooth",params=c(method="loess"))
)
require(GGally)
require(ggplot2)
g=ggpairs(mtcars,lower=list(continuous="smooth",params=c(method="loess"))
)
ggpairs(mtcars,lower=list(continuous="smooth",params=c(method="loess")))
require(datasets)
ggpairs(mtcars,lower=list(continuous="smooth",params=c(method="loess")))
require(datasets)
require(mtcars)
require(GGally)
require(ggplot2)
ggpairs(mtcars,lower=list(continuous="smooth",params=c(method="loess")))
?ggpairs
pairs(mtcars)
summary(pairs(mtcars))
cor(mtcars)
str(mtcars)
data(tips, package = "reshape")
import ggplot2
ggpairs(airquality[, 1:4])
pm <- ggpairs(tips, upper = "blank")
pairs(mtcars, panel = panel.smooth, main = "Motor Trend data")
pairs(mtcars, panel = panel.smooth, main = "Motor Trend data", col = 10)
pairs(mtcars, panel = panel.smooth, main = "Motor Trend data", col = 3)
summary(lm(Fertility ~ . , data = swiss))$coefficients
summary(lm(Fertility ~ Agriculture, data = swiss))$coefficients
require(datasets)
require(mtcars)
require(GGally)
require(ggplot2)
g=ggpairs(mtcars,lower=list(continuous="smooth",params=c(method="loess")))
require(datasets)
require(mtcars)
require(GGally)
require(ggplot2)
g=ggpairs(mtcars,lower=list(continuous="smooth",params=c(method="loess")))
g=plotmatrix(mtcars,lower=list(continuous="smooth",params=c(method="loess")))
g=plotmatrix(mtcars,lower=list(continuous="smooth",params=c(method="loess")))
?plotmatrix
ggpairs(iris)
install.packages("GGally")
library(GGally)
ggpairs(iris)
g=ggpairs(mtcars,lower=list(continuous="smooth",params=c(method="loess")))
g
mtcarsDF<-mtcars
mtcarsDF$cyl<-factor(mtcarsDF$cyl)
mtcarsDF$am<-factor(mtcarsDF$am)
mtcarsDF$gear<-factor(mtcarsDF$gear)
mtcarsDF$carb<-factor(mtcarsDF$carb)
mtcarsDF$vs<-factor(mtcarsDF$vs)
fit<-lm(mpg~.,mtcarsDF)
vif(fit)[order(vif(fit)[,3]),]
library(vif)
install.packages("vif")
vif(fit)
step <- stepAIC(fit, direction="both", trace = FALSE);
summary(step)
library(MASS)
vif(fit)[order(vif(fit)[,3]),]
step <- stepAIC(fit, direction="both", trace = FALSE);
summary(step)
vif(fit)[order(vif(fit)[,3]),]
vif(fit)
library(MASS)
fit<-lm(mpg~.,mtcarsDF)
step <- stepAIC(fit, direction="both", trace = FALSE);
summary(step)
vif(fit)
install.packages("vif")
library(MASS)
fit<-lm(mpg~.,mtcarsDF)
step <- stepAIC(fit, direction="both", trace = FALSE);
summary(step)
vif(fit)
summary(fit)$coef
summary(fit)$coef
summary(fit)$coef[order(summary(fit)$coef[,4])]
summary(fit)$coef[order(summary(fit)$coef[,4]),]
fit1<-lm(mpg~am+wt+hp,mtcarsDF)
summary(fit1)$coef[order(summary(fit1)$coef[,4]),]
summary(fit1)
fit1<-lm(mpg~am+wt+hp,mtcarsDF)
summary(fit1)$coef[order(summary(fit1)$coef[,4]),]
step <- stepAIC(fit, direction="both", trace = FALSE);
summary(step)
vif(fit)[order(vif(fit)[,3]),]
AICstepModel <- stepAIC(fit, direction="both", trace = FALSE);
summary(AICstepModel)
summary(fit)$coef[order(summary(fit)$coef[,4]),]
vif(fit)[order(vif(fit)[,3]),]
library(car)
vif(fit)[order(vif(fit)[,3]),]
?vif
vif(fit1)[order(vif(fit1)[,3]),]
vif(lm(mpg~am+wt+hp,mtcarsDF))
anova(fit,fit1,AICstepModel)
fit0<-lm(mpg~am,mtcarsDF)
fit<-lm(mpg~.,mtcarsDF)
fit1<-lm(mpg~am+wt+hp,mtcarsDF)
AICstepModel <- stepAIC(fit, direction="both", trace = FALSE);
anova(fit0,fit,fit1,AICstepModel)
anova(fit0,AICstepModel)
anova(fit0,fit,fit1,AICstepModel)
fit3 <- lm(mpg ~ wt + am + qsec + carb, data=df)
fit3 <- lm(mpg ~ wt + am + qsec + carb, data=mtcarsDF)
anova(fit0,fit,fit1,AICstepModel,fit3)
fit4 <- lm(mpg ~ wt + am + qsec , data=mtcarsDF)
anova(fit0,fit,fit1,AICstepModel,fit3,fit4)
summary(fit4)$coef[order(summary(fit4)$coef[,4]),]
anova(fit0,fit,fit4)
anova(fit,fit0,fit4)
anova(fit0,fit4,fit)
anova(fit0,fit,fit1,AICstepModel,fit3,fit4)
anova(fit0,fit4,fit1,AICstepModel,fit3,fit)
summary(lm(mpg ~ 1, data=mtcars))$coef
summary(lm(mpg ~ factor(am)*.,data=mtcars))
summary(lm(mpg ~ factor(am)*.,data=mtcarsDF))
summary(lm(mpg ~ factor(am)*.,data=mtcars))
coefplot(fit)
fit.min <- lm(mpg ~ 1, data=mtcars)  # minimum possible regression model
reduced.model <- step(fit.min, direction="forward",
scope=(~ factor(am):(wt + qsec + carb)))
reduced.model <- step(fit, direction="forward")
summary(mpg ~ cyl + disp + hp + drat + wt + qsec + vs + am + gear + carb)$coef
summary(lm(mpg ~ cyl + disp + hp + drat + wt + qsec + vs + am + gear + carb))$coef
summary(lm(mpg ~ cyl + disp + hp + drat + wt + qsec + vs + am + gear + carb,data=mtcarsDF))$coef
reduced.model <- step(fit, direction="both")
summary(AICstepModel)
TTest<-t.test(x=mtcars[mtcars$am==0,]$mpg,y=mtcars[mtcars$am==1,]$mpg,paired=FALSE)
TTest$p.value
summary(TTest)
library(car)
library(GGally)
require(datasets);
require(GGally);
require(ggplot2)
mtcarsDF<-mtcars
g=ggpairs(mtcars,lower=list(continuous="smooth",params=c(method="loess")))
library(MASS)
g
fit<-lm(mpg~.,mtcarsDF)
summary(fit)$coef[order(summary(fit)$coef[,4]),]
mtcarsDF$cyl<-factor(mtcarsDF$cyl)
mtcarsDF$am<-factor(mtcarsDF$am)
mtcarsDF$gear<-factor(mtcarsDF$gear)
mtcarsDF$carb<-factor(mtcarsDF$carb)
mtcarsDF$vs<-factor(mtcarsDF$vs)
fit<-lm(mpg~.,mtcarsDF)
summary(fit)$coef[order(summary(fit)$coef[,4]),]
fit4 <- lm(mpg ~ wt + am + qsec , data=mtcarsDF)
vip(fit4)
library(car)
vip(fit4)
fit4 <- lm(mpg ~ wt + am + qsec , data=mtcarsDF)
vip(fit4)
library(MASS)
library(car)
fit4 <- lm(mpg ~ wt + am + qsec , data=mtcarsDF)
vip(fit4)
?vip
library(car)
AICstepModel <- stepAIC(fit, direction="both", trace = FALSE);
summary(AICstepModel)
vif(fit)
vif(fit)[order(vif(fit)[,3]),]
---
output: html_document
mtcarsDF<-mtcars
boxplot(mpg ~ am,
data=mtcarsDF,
col=c("orange","blue"),
las=2,main="Figure 1 ",
xlab = "transmission type (am)",
ylab = "miles per gallon(mpg)")
boxplot(mpg ~ am,
xlab = "Transmission (0 = auto, 1 = manual)",
ylab = "Miles/(US) gallon",
main = "MPG by Transmission Type",
data=mtcarsDF,
col=c("orange","blue"),las=2)
boxplot(mpg ~ am,
xlab = "Transmission (0 = auto, 1 = manual)",
ylab = "Miles/(US) gallon",
main = "Figure 1 - MPG by Transmission Type",
data=mtcarsDF,
col=c("orange","blue"),las=2)
g=ggpairs(mtcars,lower=list(continuous="smooth",params=c(method="loess")),title = "Figure 2: Motor Trend Cars (1973–74 models)")
g
library(MASS)
library(car)
library(GGally)
library(fmsb)
require(datasets);
require(GGally);
require(ggplot2)
library(ggplot2)
g=ggpairs(mtcars,lower=list(continuous="smooth",params=c(method="loess")),title = "Figure 2: Motor Trend Cars (1973–74 models)")
g
install.packages("C:/Program Files/MiKTeX 2.9/miktex/bin/x64/arlatex.exe", repos = NULL)
install.packages("C:/Program Files/MiKTeX 2.9/miktex/bin/x64/arlatex.exe", repos = NULL)
Sys.which("pdflatex")
install.packages("C:/Program Files/MiKTeX 2.9/miktex/bin/x64/latex.exe", repos = NULL)
size=1
?highlight
mtcarsDF<-mtcars
mtcarsDF[mtcarsDF$am==0,]$am<-"automatic"
mtcarsDF[mtcarsDF$am==1,]$am<-"manual"
##boxplot(mpg ~ am,xlab = "Transmission (0 = auto, 1 = manual)",ylab = "Miles/(US) gallon",main = "Figure 1 - MPG by Transmission Type",data=mtcarsDF, cex.main=0.9,col=c("orange","blue"),las=2)
aggregate(mtcarsDF$mpg,by=list(mtcarsDF$am), mean)
automatic<-mtcarsDF[mtcarsDF$am==0,]$am
manual<-mtcarsDF[mtcarsDF$am==1,]$am
aggregate(mtcarsDF$mpg,by=list(mtcarsDF$am), mean)
avgDF<-aggregate(mtcarsDF$mpg,by=list(mtcarsDF$am), mean)
names(avgDF)<-c("Transmission Type","Average MPG")
avgDF
xtable(avgDF)
library(xtable)
xtable(avgDF)
xtable(avgDF)
par(mfrow=c(1,1))
boxplot(mpg ~ am,xlab = "Transmission (0 = auto, 1 = manual)",ylab = "Miles/(US) gallon",main = "Figure 1 - MPG by Transmission Type",data=mtcarsDF, cex.main=0.9,col=c("orange","blue"),las=2)
par(mai=c(1.02,0.82,0.82,0.42))
boxplot(mpg ~ am,xlab = "Transmission (0 = auto, 1 = manual)",ylab = "Miles/(US) gallon",main = "Figure 1 - MPG by Transmission Type",data=mtcarsDF, cex.main=0.9,col=c("orange","blue"),las=2)
boxplot(mpg ~ am,xlab = "Transmission (0 = auto, 1 = manual)",ylab = "Miles/(US) gallon",main = "Figure 1 - MPG by Transmission Type",data=mtcarsDF, cex.main=0.9,col=c("orange","blue"),las=2)
boxplot(mpg ~ am,xlab = "Transmission (0 = auto, 1 = manual)",ylab = "Miles/(US) gallon",main = "Figure 1 - MPG by Transmission Type",data=mtcarsDF, cex.lab=0.5,cex.main=0.5,col=c("orange","blue"),las=1)
boxplot(mpg ~ am,xlab = "Transmission (0 = auto, 1 = manual)",
ylab = "Miles/(US) gallon",
main = "Figure 1 - MPG by Transmission Type",data=mtcarsDF,
cex.lab=0.6,cex.main=0.6,cex.axis=0.6,
col=c("orange","blue"),las=1)
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
data
list
data
diagonosis
diagnosis
predictors
nrow(predictors)
nrow(diagnosis)
diagnosis
nrow(diagnosis)
dim(diagnosis)
diagnosis
nrow(predictors)
adData = data.frame(diagnosis,predictors)
trainIndex = createDataPartition(diagnosis,p=0.5,list=FALSE)
nrow(adData)
dim(adData)
trainIndex
training = adData[trainIndex,]
nrow(training)
adData = data.frame(diagnosis,predictors)
testIndex = createDataPartition(diagnosis, p = 0.50,list=FALSE)
training = adData[-testIndex,]
testing = adData[testIndex,]
nrow(training)
nrow(testing)
dim(training)
dim(testing)
library(manipulate)
myPlot <‐ function(s) {
plot(cars$dist ‐ mean(cars$dist), cars$speed ‐ mean(cars$speed))
abline(0, s)
}
manipulate(myPlot(s), slider = x(0, 2, step = 0.1))
manipulate(myPlot(s), s = slider(0, 2, step = 0.1))
manipulate(myPlot, s = slider(0, 2, step = 0.1))
manipulate(myPlot(s), x.s = slider(0, 2, step = 0.1))
install.packages('devtools')
dTable(airquality, sPaginationType = "full_numbers")
require(rCharts)
library(devtools)
require(devtools)
install_github('rCharts', 'ramnathv')
require(rcharts)
require(rCharts)
dTable(airquality, sPaginationType = "full_numbers")
d <‐ data.frame(airquality, stringsAsFactors = FALSE) print(d)
d <- data.frame(airquality, stringsAsFactors = FALSE) print(d)
airquality
shiny::runApp('C:/KantiOLD/courseera/DataScience/Develop Data Products/week1/Q5')
shiny::runApp('C:/KantiOLD/courseera/DataScience/Develop Data Products/week1/Q5')
shiny::runApp('C:/KantiOLD/courseera/DataScience/Develop Data Products/week1/Q5')
shiny::runApp('C:/KantiOLD/courseera/DataScience/Develop Data Products/week1/Q5')
shiny::runApp('C:/KantiOLD/courseera/DataScience/Develop Data Products/week1/Q5')
shiny::runApp('C:/KantiOLD/courseera/DataScience/Develop Data Products/week1/Q5')
shiny::runApp('C:/KantiOLD/courseera/DataScience/Develop Data Products/week1/Q5')
shiny::runApp('C:/KantiOLD/courseera/DataScience/Develop Data Products/week1/Q5')
shiny::runApp('C:/KantiOLD/courseera/DataScience/Develop Data Products/week1/Q5')
hist(galton$child, xlab='child height', col='lightblue',main='Histogram')
library(UsingR)
library(usingR)
shiny::runApp('C:/KantiOLD/courseera/DataScience/Develop Data Products/week1/Q5')
install.packages("UsingR")
library(UsingR)
shiny::runApp('C:/KantiOLD/courseera/DataScience/Develop Data Products/week1/Q5')
shiny::runApp('C:/KantiOLD/courseera/DataScience/Develop Data Products/week1/Q5')
devtools::install_github('rstudio/shinyapps')
shinyapps::setAccountInfo(name='kchalasa', token='53A6940D68FA62CD0049F34D64BBE473', secret='OFGjRL2rMKVLW9AwzGNNnPtudeZS/luF6U9YTHb3')
shiny::runApp('C:/KantiOLD/courseera/DataScience/Develop Data Products/prj')
shiny::runApp('C:/KantiOLD/courseera/DataScience/Develop Data Products/prj')
shiny::runApp('C:/KantiOLD/courseera/DataScience/Develop Data Products/prj')
shiny::runApp('C:/KantiOLD/courseera/DataScience/Develop Data Products/prj')
library(shinyapps)
shinyapps::deployApp('C:/KantiOLD/courseera/DataScience/Develop Data Products/prj')
setwd("C:/KantiOLD/courseera/DataScience/Develop Data Products/Slides/tria11/createslide")
library(slidify)
slidify("index.Rmd")
runDeck()
runDeck()
slidify("index.Rmd")
runDeck()
slidify("index.Rmd")
browseURL("index.html")
setwd("C:/KantiOLD/courseera/DataScience/Develop Data Products/Presentation")
author("Presentation_Deck")
slidify("index.Rmd")
browseURL("index.html")
setwd("C:/KantiOLD/courseera/DataScience/Develop Data Products/GANationalTests_prj")
#############################################
## This script does the following ##
## 1. Install packages needed for this application.
## 2. Create a "data" directory if it doesnot exists in current working directory
## 3. Download the needed files from Georgia Department of Education website (if files do not exists)
## 4. Pre-processes the data and prepare the data frames needed for reporting
#############################################
# Setup environment needed
if (require("shiny") == FALSE)  install.packages("shiny")
if (require("XLConnect") == FALSE)  install.packages("XLConnect")
if (require("gdata") == FALSE)  install.packages("gdata")
library(slidify)
require(XLConnect)
require(gdata)
# Create data directory if it doesnot exist
if (!file.exists("data")) dir.create("data")
# Download Georgia Public Schools District File
if (!file.exists("data/CCRPI.xls"))
download.file("http://www.gadoe.org/CCRPI/Documents/2014/2014%20CCRPI%20Indicator%20Score.xls",destfile="data/CCRPI.xls",mode="wb")
# Download Georgia Public School SAT and AP File
if (!file.exists("data/SATandAP.xlsx"))
download.file("http://www.gadoe.org/Curriculum-Instruction-and-Assessment/Curriculum-and-Instruction/Documents/COLLEGE%20READINESS/2014-SAT-GA-School-Level.xlsx",destfile="data/SATandAP.xlsx",mode="wb")
# Download Georgia Public School ACT File
if (!file.exists("data/ACT.xls"))
download.file("http://www.gadoe.org/Curriculum-Instruction-and-Assessment/Curriculum-and-Instruction/Documents/COLLEGE%20READINESS/2014-ACT-GA-School-Level.xls",destfile="data/ACT.xls",mode="wb")
# School Names cleanup so they can be mapped to corresponding School Districts
source("schoolNameCleanup.R")
# Load Georgia Department of Education 2014 High Schools and School Districts into a data.frame
wb <- loadWorkbook("data/CCRPI.xls")
CCRPI <- readWorksheet(wb, sheet = "Sheet1", header = TRUE)
# Keep only High School Records
gadoeHS<-unique(CCRPI[CCRPI$GRADE.CLUSTER.DESC=="High School" & CCRPI$SYSTEM.ID!="ALL" & CCRPI$SCHOOL.NAME!="All Schools",c(1:5)])
gadoeHS$SCHOOL.NAME<-trim(gadoeHS$SCHOOL.NAME)
# Load SAT data and Clean school district information
wb1 <- loadWorkbook("data/SATandAP.xlsx")
SATAP <- readWorksheet(wb1, sheet = "Table 1", header = TRUE,startRow=4)
SATAP$High.School<-trim(SATAP$High.School)
# Keep only relevant columns in SAT data
SAT<-suppressWarnings(unique(SATAP[-which(is.na(as.numeric(SATAP$Col2))),c(1:6)]))
# Match Schools by Name and ID using applications on GADOE website
SAT<-schoolNameCleanup(SAT)
SAT<-merge(SAT, gadoeHS, by.x="High.School", by.y = "SCHOOL.NAME", all.x=TRUE)
# Discard Schools not matched to Districts
# nrow(SAT[which(is.na(SAT$SCHOOL.ID)),c(1,2)])
SAT<-SAT[-which(is.na(SAT$SCHOOL.ID)),]
## Matched High Schools to School Districts. This list used for matching AP and ACT data to keep data consistent
matched_schools<-unique(SAT[,c(2,8,9,10,1)])
names(matched_schools)<-c("AICODE" , "SYSTEM.ID","SYSTEM.NAME","SCHOOL.ID","High.School")
# Load AP data and Clean school district information
## Keep only relevant columns in AP data
AP<-suppressWarnings(unique(SATAP[-which(is.na(as.numeric(SATAP$Col2))),c(1,2,9,10,11)]))
# Map District information with AP High School Data
AP<-merge(AP, matched_schools, by.x="Col2", by.y = "AICODE", all.x=TRUE)
# Number of High Schools did not match
#nrow(AP[which(is.na(AP$SCHOOL.ID)),])
# Discard Schools not matched to Districts
AP<-AP[-which(is.na(AP$SCHOOL.ID)),]
## Load ACT Data and Clean school district information
wb2 <- loadWorkbook("data/ACT.xls")
ACTdf <- readWorksheet(wb2, sheet = "Sheet1", header = TRUE)
ACT<-ACTdf[,c(2,4,5,6,7,8,9,10,11,12)]
names(ACT)<-c("District.Name","School","AICODE","School_Year","Test_Takers","Avg.Eng","Avg.Math","Avg.Reading","Avg.Science","Avg_Composite" )
# Map District information with ACT High School Data
ACT<-merge(ACT, matched_schools, by.x="AICODE", by.y = "AICODE", all.x=TRUE)
# nrow(ACT[which(is.na(ACT$SCHOOL.ID)),])
# Discard Schools not matched to Districts
ACT<-ACT[-which(is.na(ACT$SCHOOL.ID)),]
## Pre-process SAT data frame for reporting and add calculated columns like Avg_Combined, State.Rank ETC.
names(SAT) <-c( "School","AICode","Test_Takers","Avg_Reading", "Avg_Math","Avg_Writing",
"School_Year","District_Code","District","School_Code" )
SAT$Avg_Reading<-suppressWarnings(as.numeric(gsub(",", "",SAT$Avg_Reading)))
SAT$Avg_Math<-suppressWarnings(as.numeric(gsub(",", "",SAT$Avg_Math)))
SAT$Avg_Writing<-suppressWarnings(as.numeric(gsub(",", "",SAT$Avg_Writing)))
SAT$Avg_Combined<-SAT$Avg_Reading+SAT$Avg_Math+SAT$Avg_Writing
SAT$State.Rank<-rank(-SAT$Avg_Combined, na.last = TRUE,ties.method = "max")
SAT<-SAT[order(SAT$State.Rank),]
SAT<-SAT[,c(8,9,10,1,11,12,3,4,5,6,7,2)]
SAT2014<-SAT
## Pre-process AP data frame for reporting and add calculated columns like AP_PASS_PCT, State.Rank etc
names(AP)<-c("AICode","School","Test_Takers","Total.Exams.Taken","Num.of.Exams.with.Scores.3.4.or.5"  ,
"District_Code" ,"District","School_Code" ,"High.School.y"    )
AP$Total.Exams.Taken<- suppressWarnings(as.numeric(gsub(",", "", AP$Total.Exams.Taken)))
AP$Num.of.Exams.with.Scores.3.4.or.5<- suppressWarnings(as.numeric(gsub(",", "",AP$Num.of.Exams.with.Scores.3.4.or.5)))
AP$Test_Takers<- suppressWarnings(as.numeric(gsub(",", "",AP$Test_Takers)))
AP$AP_PASS_PCT<- round(AP$Num.of.Exams.with.Scores.3.4.or.5/AP$Total.Exams.Taken*100,2)
AP$State.Rank<-rank(-AP$AP_PASS_PCT, na.last = TRUE,ties.method = "max")
AP<-AP[,c(6,7,8,2,10,11,3,4,5,1)]
AP<-AP[order(AP$State.Rank),]
AP2014<-AP
## Pre-process ACT data frame for reporting and add calculated columns like State.Rank
names(ACT)<-c("AICODE","District_ACT","School_ACT","School_Year","Test_Takers",
"Avg_Eng","Avg_Math","Avg_Reading","Avg_Science","Avg_Composite",
"District_Code",  "District","School_Code",  "School")
ACT$State.Rank<-rank(-ACT$Avg_Composite, na.last = TRUE,ties.method = "max")
ACT<-ACT[order(ACT$State.Rank),]
ACT<-unique(ACT[,c(11,12,13,14,10,15,5,6,7,8,9,1,4)])
names(ACT)<-c("District_Code","District","SCHOOL.ID","School" ,"Avg_Composite" ,"State.Rank",
"Test_Takers","Avg_Eng","Avg_Math","Avg_Reading","Avg_Science","AICODE","School_Year" )
ACT2014<-ACT
slidify("index.Rmd")
setwd("C:/KantiOLD/courseera/DataScience/Develop Data Products/Presentation/Presentation_Deck")
slidify("index.Rmd")
browseURL("index.html")
getwd()
setwd("C:/KantiOLD/courseera/DataScience/Develop Data Products/Presentation")
author("Presentation_D1")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
runDeck()
runDeck()
slidify("index.Rmd")
runDeck()
runDeck()
